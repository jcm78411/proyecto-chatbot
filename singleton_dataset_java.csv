repo_name,file_path,class_name,code
100-words-design-patterns-java,java_repos\100-words-design-patterns-java\src\main\java\com\hundredwordsgof\singleton\Singleton.java,implements,"package com.hundredwordsgof.singleton;

/**
 * Singleton class implements singleton pattern. Only one object can be
 * instantiated.
 * 
 */
public class Singleton {

  /**
   * Holds reference to single instance.
   */
  private static Singleton INSTANCE;

  /**
   * Overrides public Constructor.
   */
  private Singleton() {
  }

  /**
   * Creates the instance if it does not yet exist(lazy instantiation).
   * 
   * @return a reference to the single instance.
   */
  public static Singleton getInstance() {
    if (INSTANCE == null) {
      INSTANCE = new Singleton();
    }
    return INSTANCE;
  }
}
"
MasterSeleniumFramework_BDD,java_repos\MasterSeleniumFramework_BDD\src\test\java\awesomecucumber\utils\ConfigLoader.java,ConfigLoader,"/**
 * @author Rajat Verma
 * https://www.linkedin.com/in/rajat-v-3b0685128/
 * https://github.com/rajatt95
 * https://rajatt95.github.io/
 *
 * Course: Cucumber BDD Masterclass with Selenium 4 & Java + Framework (https://www.udemy.com/course/cucumber-bdd-masterclass/)
 * Tutor: Omprakash Chavan (https://www.udemy.com/user/omprakash-chavan/)
 */

/***************************************************/

package awesomecucumber.utils;

import static awesomecucumber.constants.FrameworkConstants.DIRECTORY_ENV_CONFIG;
import static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_INT;
import static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_PROD;
import static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_QA;
import static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_STG;
import static awesomecucumber.constants.FrameworkConstants.PARAMETER_ENV;

import java.util.Properties;

import awesomecucumber.enums.EnvType;

/**
 * Singleton Design Pattern is implemented here
 */
public class ConfigLoader {

	private static final String BASE_URL = ""baseUrl"";
	private static final String SEND_EMAIL_TO_USERS = ""send_email_to_users"";


	// private final Properties properties;
	private Properties properties;

	private static ConfigLoader configLoader;

	private ConfigLoader() {

		/**
		 * Setting the Environment Parameter here.
		 * 
		 * By default, Stage will be taken
		 */
		// PARAMETER_ENV = ""env"";
		String env = System.getProperty(PARAMETER_ENV, String.valueOf(EnvType.STG));

		switch (EnvType.valueOf(env)) {

		case QA: {
			properties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_QA);
			break;
		}
		case INT: {
			properties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_INT);
			break;
		}
		case STG: {
			properties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_STG);
			break;
		}
		case PROD: {
			properties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_PROD);
			break;
		}
		default:
			throw new IllegalStateException(""INVALID ENV: "" + env);
		}
	}

	public static ConfigLoader getInstance() {
		if (configLoader == null) {
			configLoader = new ConfigLoader();
		}
		return configLoader;
	}

	public String getBaseUrl() {
		return getPropertyValue(BASE_URL);
	}

	public String getSendEmailToUsers() {
		return getPropertyValue(SEND_EMAIL_TO_USERS);
	}
	
	private String getPropertyValue(String propertyKey) {
		String prop = properties.getProperty(propertyKey);
		if (prop != null) {
			return prop.trim();
		} else {
			throw new RuntimeException(""Property "" + propertyKey + "" is not specified in the config.properties file"");
		}
	}
	
	
}
"
JavaCode,java_repos\JavaCode\Java Code\Singleton.java,Singleton,"import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;

public class Singleton {
	
	private static Singleton firstInstance = null;
	
	String[] scrabbleLetters = {""a"", ""a"", ""a"", ""a"", ""a"", ""a"", ""a"", ""a"", ""a"",
			""b"", ""b"", ""c"", ""c"", ""d"", ""d"", ""d"", ""d"", ""e"", ""e"", ""e"", ""e"", ""e"", 
			""e"", ""e"", ""e"", ""e"", ""e"", ""e"", ""e"", ""f"", ""f"", ""g"", ""g"", ""g"", ""h"", 
			""h"", ""i"", ""i"", ""i"", ""i"", ""i"", ""i"", ""i"", ""i"", ""i"", ""j"", ""k"", ""l"", 
			""l"", ""l"", ""l"", ""m"", ""m"", ""n"", ""n"", ""n"", ""n"", ""n"", ""n"", ""o"", ""o"", 
			""o"", ""o"", ""o"", ""o"", ""o"", ""o"", ""p"", ""p"", ""q"", ""r"", ""r"", ""r"", ""r"", 
			""r"", ""r"", ""s"", ""s"", ""s"", ""s"", ""t"", ""t"", ""t"", ""t"", ""t"", ""t"", ""u"", 
			""u"", ""u"", ""u"", ""v"", ""v"", ""w"", ""w"", ""x"", ""y"", ""y"", ""z"",};  
	
	private LinkedList<String> letterList = new LinkedList<String> (Arrays.asList(scrabbleLetters));
   
    // Used to slow down 1st thread
	static boolean firstThread = true;
	
	// Created to keep users from instantiation
	// Only Singleton will be able to instantiate this class
   
	private Singleton() { }
	
	// We could make getInstance a synchronized method to force 
	// every thread to wait its turn. That way only one thread
	// can access a method at a time. This can really slow everything
	// down though
	// public static synchronized Singleton getInstance()
	
	public static Singleton getInstance() {
		if(firstInstance == null) {
			
			// This is here to test what happens if threads try
			// to create instances of this class
			
			if(firstThread){
			
				firstThread = false;
				
				try {
					Thread.currentThread();
					Thread.sleep(1000);
				} catch (InterruptedException e) {
				
					e.printStackTrace();
				}
			}
			
			// Here we just use synchronized when the first object
			// is created
			
			synchronized(Singleton.class){ 
			
				if(firstInstance == null) {
					// If the instance isn't needed it isn't created
					// This is known as lazy instantiation
			
					firstInstance = new Singleton();
			
					// Shuffle the letters in the list
					Collections.shuffle(firstInstance.letterList);
					
				}
			
			}
			
		}
		
		// Under either circumstance this returns the instance
		
		return firstInstance;
	}
	
	public LinkedList<String> getLetterList(){
		
		return firstInstance.letterList;
		
	}
	
	public LinkedList<String> getTiles(int howManyTiles){
		
		// Tiles to be returned to the user
		
		LinkedList<String> tilesToSend = new LinkedList<String>();
		
		// Cycle through the LinkedList while adding the starting
		// Strings to the to be returned LinkedList while deleting
		// them from letterList
		
		for(int i = 0; i <= howManyTiles; i++){
		
			tilesToSend.add(firstInstance.letterList.remove(0));
		
		}
		
		// Return the number of letter tiles requested
		
		return tilesToSend;
		
	}
	
}"
