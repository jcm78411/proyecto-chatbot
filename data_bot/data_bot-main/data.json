{
  "intents": [
    {
      "tag": "unknown",
      "patterns": [
        "¿Cómo se implementa un singleton tipo unknown?",
        "¿Tienes una implementación unknown?",
        "¿Me puedes mostrar un singleton con el estilo unknown?",
        "¿Cuál es el código de singleton versión unknown?",
        "¿Cómo hago una clase singleton usando el método unknown?",
        "Dame un ejemplo de singleton con enfoque unknown",
        "Quiero un singleton tipo unknown, ¿puedes ayudarme?",
        "¿Hay alguna forma de implementar singleton como unknown?",
        "¿Puedes escribirme una clase singleton tipo unknown?",
        "Explícame un singleton con patrón unknown",
        "¿En qué consiste una implementación unknown del patrón singleton?",
        "¿Tienes código unknown de singleton?",
        "¿Puedes darme una muestra del singleton unknown?",
        "¿Cómo luce una clase singleton con el estilo unknown?",
        "¿Puedes generar un ejemplo unknown para el patrón singleton?"
      ],
      "responses": [
        "Ejemplo de código (unknown):\n\npackage com.hundredwordsgof.singleton;\n\n/**\n * Singleton class implements singleton pattern. Only one object can be\n * instantiated.\n * \n */\npublic class Singleton {\n\n  /**\n   * Holds reference to single instance.\n   */\n  private static Singleton INSTANCE;\n\n  /**\n   * Overrides public Constructor.\n   */\n  private Singleton() {\n  }\n\n  /**\n   * Creates the instance if it does not yet exist(lazy instantiation).\n   * \n   * @return a reference to the single instance.\n   */\n  public static Singleton getInstance() {\n    if (INSTANCE == null) {\n      INSTANCE = new Singleton();\n    }\n    return INSTANCE;\n  }\n}",
        "Ejemplo de código (unknown):\n\n/**\n * @author Rajat Verma\n * https://www.linkedin.com/in/rajat-v-3b0685128/\n * https://github.com/rajatt95\n * https://rajatt95.github.io/\n *\n * Course: Cucumber BDD Masterclass with Selenium 4 & Java + Framework (https://www.udemy.com/course/cucumber-bdd-masterclass/)\n * Tutor: Omprakash Chavan (https://www.udemy.com/user/omprakash-chavan/)\n */\n\n/***************************************************/\n\npackage awesomecucumber.utils;\n\nimport static awesomecucumber.constants.FrameworkConstants.DIRECTORY_ENV_CONFIG;\nimport static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_INT;\nimport static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_PROD;\nimport static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_QA;\nimport static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_STG;\nimport static awesomecucumber.constants.FrameworkConstants.PARAMETER_ENV;\n\nimport java.util.Properties;\n\nimport awesomecucumber.enums.EnvType;\n\n/**\n * Singleton Design Pattern is implemented here\n */\npublic class ConfigLoader {\n\n\tprivate static final String BASE_URL = \"baseUrl\";\n\tprivate static final String SEND_EMAIL_TO_USERS = \"send_email_to_users\";\n\n\n\t// private final Properties properties;\n\tprivate Properties properties;\n\n\tprivate static ConfigLoader configLoader;\n\n\tprivate ConfigLoader() {\n\n\t\t/**\n\t\t * Setting the Environment Parameter here.\n\t\t * \n\t\t * By default, Stage will be taken\n\t\t */\n\t\t// PARAMETER_ENV = \"env\";\n\t\tString env = System.getProperty(PARAMETER_ENV, String.valueOf(EnvType.STG));\n\n\t\tswitch (EnvType.valueOf(env)) {\n\n\t\tcase QA: {\n\t\t\tproperties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_QA);\n\t\t\tbreak;\n\t\t}\n\t\tcase INT: {\n\t\t\tproperties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_INT);\n\t\t\tbreak;\n\t\t}\n\t\tcase STG: {\n\t\t\tproperties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_STG);\n\t\t\tbreak;\n\t\t}\n\t\tcase PROD: {\n\t\t\tproperties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_PROD);\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"INVALID ENV: \" + env);\n\t\t}\n\t}\n\n\tpublic static ConfigLoader getInstance() {\n\t\tif (configLoader == null) {\n\t\t\tconfigLoader = new ConfigLoader();\n\t\t}\n\t\treturn configLoader;\n\t}\n\n\tpublic String getBaseUrl() {\n\t\treturn getPropertyValue(BASE_URL);\n\t}\n\n\tpublic String getSendEmailToUsers() {\n\t\treturn getPropertyValue(SEND_EMAIL_TO_USERS);\n\t}\n\t\n\tprivate String getPropertyValue(String propertyKey) {\n\t\tString prop = properties.getProperty(propertyKey);\n\t\tif (prop != null) {\n\t\t\treturn prop.trim();\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"Property \" + propertyKey + \" is not specified in the config.properties file\");\n\t\t}\n\t}\n\t\n\t\n}",
        "Ejemplo de código (unknown):\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedList;\n\npublic class Singleton {\n\t\n\tprivate static Singleton firstInstance = null;\n\t\n\tString[] scrabbleLetters = {\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n\t\t\t\"b\", \"b\", \"c\", \"c\", \"d\", \"d\", \"d\", \"d\", \"e\", \"e\", \"e\", \"e\", \"e\", \n\t\t\t\"e\", \"e\", \"e\", \"e\", \"e\", \"e\", \"e\", \"f\", \"f\", \"g\", \"g\", \"g\", \"h\", \n\t\t\t\"h\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"j\", \"k\", \"l\", \n\t\t\t\"l\", \"l\", \"l\", \"m\", \"m\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"o\", \"o\", \n\t\t\t\"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"p\", \"p\", \"q\", \"r\", \"r\", \"r\", \"r\", \n\t\t\t\"r\", \"r\", \"s\", \"s\", \"s\", \"s\", \"t\", \"t\", \"t\", \"t\", \"t\", \"t\", \"u\", \n\t\t\t\"u\", \"u\", \"u\", \"v\", \"v\", \"w\", \"w\", \"x\", \"y\", \"y\", \"z\",};  \n\t\n\tprivate LinkedList<String> letterList = new LinkedList<String> (Arrays.asList(scrabbleLetters));\n   \n    // Used to slow down 1st thread\n\tstatic boolean firstThread = true;\n\t\n\t// Created to keep users from instantiation\n\t// Only Singleton will be able to instantiate this class\n   \n\tprivate Singleton() { }\n\t\n\t// We could make getInstance a synchronized method to force \n\t// every thread to wait its turn. That way only one thread\n\t// can access a method at a time. This can really slow everything\n\t// down though\n\t// public static synchronized Singleton getInstance()\n\t\n\tpublic static Singleton getInstance() {\n\t\tif(firstInstance == null) {\n\t\t\t\n\t\t\t// This is here to test what happens if threads try\n\t\t\t// to create instances of this class\n\t\t\t\n\t\t\tif(firstThread){\n\t\t\t\n\t\t\t\tfirstThread = false;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tThread.currentThread();\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Here we just use synchronized when the first object\n\t\t\t// is created\n\t\t\t\n\t\t\tsynchronized(Singleton.class){ \n\t\t\t\n\t\t\t\tif(firstInstance == null) {\n\t\t\t\t\t// If the instance isn't needed it isn't created\n\t\t\t\t\t// This is known as lazy instantiation\n\t\t\t\n\t\t\t\t\tfirstInstance = new Singleton();\n\t\t\t\n\t\t\t\t\t// Shuffle the letters in the list\n\t\t\t\t\tCollections.shuffle(firstInstance.letterList);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t// Under either circumstance this returns the instance\n\t\t\n\t\treturn firstInstance;\n\t}\n\t\n\tpublic LinkedList<String> getLetterList(){\n\t\t\n\t\treturn firstInstance.letterList;\n\t\t\n\t}\n\t\n\tpublic LinkedList<String> getTiles(int howManyTiles){\n\t\t\n\t\t// Tiles to be returned to the user\n\t\t\n\t\tLinkedList<String> tilesToSend = new LinkedList<String>();\n\t\t\n\t\t// Cycle through the LinkedList while adding the starting\n\t\t// Strings to the to be returned LinkedList while deleting\n\t\t// them from letterList\n\t\t\n\t\tfor(int i = 0; i <= howManyTiles; i++){\n\t\t\n\t\t\ttilesToSend.add(firstInstance.letterList.remove(0));\n\t\t\n\t\t}\n\t\t\n\t\t// Return the number of letter tiles requested\n\t\t\n\t\treturn tilesToSend;\n\t\t\n\t}\n\t\n}"
      ]
    },
    {
      "tag": "simple",
      "patterns": [
        "¿Cómo se implementa un singleton tipo simple?",
        "¿Tienes una implementación simple?",
        "¿Me puedes mostrar un singleton con el estilo simple?",
        "¿Cuál es el código de singleton versión simple?",
        "¿Cómo hago una clase singleton usando el método simple?",
        "Dame un ejemplo de singleton con enfoque simple",
        "Quiero un singleton tipo simple, ¿puedes ayudarme?",
        "¿Hay alguna forma de implementar singleton como simple?",
        "¿Puedes escribirme una clase singleton tipo simple?",
        "Explícame un singleton con patrón simple",
        "¿En qué consiste una implementación simple del patrón singleton?",
        "¿Tienes código simple de singleton?",
        "¿Puedes darme una muestra del singleton simple?",
        "¿Cómo luce una clase singleton con el estilo simple?",
        "¿Puedes generar un ejemplo simple para el patrón singleton?"
      ],
      "responses": [
        "Ejemplo de código (simple):\n\npublic class DatabaseConnection {\n    private static DatabaseConnection instance;\n    private Connection connection;\n\n    private DatabaseConnection() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:...\", \"user\", \"pass\");\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static DatabaseConnection getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnection();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n}"
      ]
    },
    {
      "tag": "double_checked",
      "patterns": [
        "¿Cómo se implementa un singleton tipo double_checked?",
        "¿Tienes una implementación double_checked?",
        "¿Me puedes mostrar un singleton con el estilo double_checked?",
        "¿Cuál es el código de singleton versión double_checked?",
        "¿Cómo hago una clase singleton usando el método double_checked?",
        "Dame un ejemplo de singleton con enfoque double_checked",
        "Quiero un singleton tipo double_checked, ¿puedes ayudarme?",
        "¿Hay alguna forma de implementar singleton como double_checked?",
        "¿Puedes escribirme una clase singleton tipo double_checked?",
        "Explícame un singleton con patrón double_checked",
        "¿En qué consiste una implementación double_checked del patrón singleton?",
        "¿Tienes código double_checked de singleton?",
        "¿Puedes darme una muestra del singleton double_checked?",
        "¿Cómo luce una clase singleton con el estilo double_checked?",
        "¿Puedes generar un ejemplo double_checked para el patrón singleton?"
      ],
      "responses": [
        "Ejemplo de código (double_checked):\n\npublic class DatabaseManager {\n    private static volatile DatabaseManager INSTANCE = null;\n\n    private DatabaseManager() {\n        if (INSTANCE != null) {\n            throw new RuntimeException(\"Use getInstance()\");\n        }\n    }\n\n    public static DatabaseManager getInstance() {\n        if (INSTANCE == null) {\n            synchronized (DatabaseManager.class) {\n                if (INSTANCE == null) {\n                    INSTANCE = new DatabaseManager();\n                }\n            }\n        }\n        return INSTANCE;\n    }\n}"
      ]
    },
    {
      "tag": "bill_pugh",
      "patterns": [
        "¿Cómo se implementa un singleton tipo bill_pugh?",
        "¿Tienes una implementación bill_pugh?",
        "¿Me puedes mostrar un singleton con el estilo bill_pugh?",
        "¿Cuál es el código de singleton versión bill_pugh?",
        "¿Cómo hago una clase singleton usando el método bill_pugh?",
        "Dame un ejemplo de singleton con enfoque bill_pugh",
        "Quiero un singleton tipo bill_pugh, ¿puedes ayudarme?",
        "¿Hay alguna forma de implementar singleton como bill_pugh?",
        "¿Puedes escribirme una clase singleton tipo bill_pugh?",
        "Explícame un singleton con patrón bill_pugh",
        "¿En qué consiste una implementación bill_pugh del patrón singleton?",
        "¿Tienes código bill_pugh de singleton?",
        "¿Puedes darme una muestra del singleton bill_pugh?",
        "¿Cómo luce una clase singleton con el estilo bill_pugh?",
        "¿Puedes generar un ejemplo bill_pugh para el patrón singleton?"
      ],
      "responses": [
        "Ejemplo de código (bill_pugh):\n\npublic class BillPughSingleton {\n    private BillPughSingleton() {}\n\n    private static class Holder {\n        private static final BillPughSingleton INSTANCE = new BillPughSingleton();\n    }\n\n    public static BillPughSingleton getInstance() {\n        return Holder.INSTANCE;\n    }\n}"
      ]
    },
    {
      "tag": "enum",
      "patterns": [
        "¿Cómo se implementa un singleton tipo enum?",
        "¿Tienes una implementación enum?",
        "¿Me puedes mostrar un singleton con el estilo enum?",
        "¿Cuál es el código de singleton versión enum?",
        "¿Cómo hago una clase singleton usando el método enum?",
        "Dame un ejemplo de singleton con enfoque enum",
        "Quiero un singleton tipo enum, ¿puedes ayudarme?",
        "¿Hay alguna forma de implementar singleton como enum?",
        "¿Puedes escribirme una clase singleton tipo enum?",
        "Explícame un singleton con patrón enum",
        "¿En qué consiste una implementación enum del patrón singleton?",
        "¿Tienes código enum de singleton?",
        "¿Puedes darme una muestra del singleton enum?",
        "¿Cómo luce una clase singleton con el estilo enum?",
        "¿Puedes generar un ejemplo enum para el patrón singleton?"
      ],
      "responses": [
        "Ejemplo de código (enum):\n\npublic enum SingletonEnum {\n    INSTANCE;\n\n    private Connection connection;\n\n    private SingletonEnum() {\n        connection = ...; // initialize database connection\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n}"
      ]
    }
  ]
}