[
  {
    "repo_name": "100-words-design-patterns-java",
    "file_path": "java_repos\\100-words-design-patterns-java\\src\\main\\java\\com\\hundredwordsgof\\singleton\\Singleton.java",
    "class_name": "implements",
    "code": "package com.hundredwordsgof.singleton;\npublic class Singleton {\n  private static Singleton INSTANCE;\n  private Singleton() {\n  }\n  public static Singleton getInstance() {\n    if (INSTANCE == null) {\n      INSTANCE = new Singleton();\n    }\n    return INSTANCE;\n  }\n}",
    "implementation_type": null,
    "thread_safe": null,
    "protection": null
  },
  {
    "repo_name": "MasterSeleniumFramework_BDD",
    "file_path": "java_repos\\MasterSeleniumFramework_BDD\\src\\test\\java\\awesomecucumber\\utils\\ConfigLoader.java",
    "class_name": "ConfigLoader",
    "code": "package awesomecucumber.utils;\nimport static awesomecucumber.constants.FrameworkConstants.DIRECTORY_ENV_CONFIG;\nimport static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_INT;\nimport static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_PROD;\nimport static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_QA;\nimport static awesomecucumber.constants.FrameworkConstants.ENV_CONFIG_STG;\nimport static awesomecucumber.constants.FrameworkConstants.PARAMETER_ENV;\nimport java.util.Properties;\nimport awesomecucumber.enums.EnvType;\npublic class ConfigLoader {\n\tprivate static final String BASE_URL = \"baseUrl\";\n\tprivate static final String SEND_EMAIL_TO_USERS = \"send_email_to_users\";\n\tprivate Properties properties;\n\tprivate static ConfigLoader configLoader;\n\tprivate ConfigLoader() {\n\t\tString env = System.getProperty(PARAMETER_ENV, String.valueOf(EnvType.STG));\n\t\tswitch (EnvType.valueOf(env)) {\n\t\tcase QA: {\n\t\t\tproperties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_QA);\n\t\t\tbreak;\n\t\t}\n\t\tcase INT: {\n\t\t\tproperties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_INT);\n\t\t\tbreak;\n\t\t}\n\t\tcase STG: {\n\t\t\tproperties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_STG);\n\t\t\tbreak;\n\t\t}\n\t\tcase PROD: {\n\t\t\tproperties = PropertyUtils.propertyLoader(DIRECTORY_ENV_CONFIG + ENV_CONFIG_PROD);\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\tthrow new IllegalStateException(\"INVALID ENV: \" + env);\n\t\t}\n\t}\n\tpublic static ConfigLoader getInstance() {\n\t\tif (configLoader == null) {\n\t\t\tconfigLoader = new ConfigLoader();\n\t\t}\n\t\treturn configLoader;\n\t}\n\tpublic String getBaseUrl() {\n\t\treturn getPropertyValue(BASE_URL);\n\t}\n\tpublic String getSendEmailToUsers() {\n\t\treturn getPropertyValue(SEND_EMAIL_TO_USERS);\n\t}\n\tprivate String getPropertyValue(String propertyKey) {\n\t\tString prop = properties.getProperty(propertyKey);\n\t\tif (prop != null) {\n\t\t\treturn prop.trim();\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"Property \" + propertyKey + \" is not specified in the config.properties file\");\n\t\t}\n\t}\n}",
    "implementation_type": null,
    "thread_safe": null,
    "protection": null
  },
  {
    "repo_name": "JavaCode",
    "file_path": "java_repos\\JavaCode\\Java Code\\Singleton.java",
    "class_name": "Singleton",
    "code": "import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedList;\npublic class Singleton {\n\tprivate static Singleton firstInstance = null;\n\tString[] scrabbleLetters = {\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\n\t\t\t\"b\", \"b\", \"c\", \"c\", \"d\", \"d\", \"d\", \"d\", \"e\", \"e\", \"e\", \"e\", \"e\", \n\t\t\t\"e\", \"e\", \"e\", \"e\", \"e\", \"e\", \"e\", \"f\", \"f\", \"g\", \"g\", \"g\", \"h\", \n\t\t\t\"h\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"j\", \"k\", \"l\", \n\t\t\t\"l\", \"l\", \"l\", \"m\", \"m\", \"n\", \"n\", \"n\", \"n\", \"n\", \"n\", \"o\", \"o\", \n\t\t\t\"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"p\", \"p\", \"q\", \"r\", \"r\", \"r\", \"r\", \n\t\t\t\"r\", \"r\", \"s\", \"s\", \"s\", \"s\", \"t\", \"t\", \"t\", \"t\", \"t\", \"t\", \"u\", \n\t\t\t\"u\", \"u\", \"u\", \"v\", \"v\", \"w\", \"w\", \"x\", \"y\", \"y\", \"z\",};  \n\tprivate LinkedList<String> letterList = new LinkedList<String> (Arrays.asList(scrabbleLetters));\n\tstatic boolean firstThread = true;\n\tprivate Singleton() { }\n\tpublic static Singleton getInstance() {\n\t\tif(firstInstance == null) {\n\t\t\tif(firstThread){\n\t\t\t\tfirstThread = false;\n\t\t\t\ttry {\n\t\t\t\t\tThread.currentThread();\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\tsynchronized(Singleton.class){ \n\t\t\t\tif(firstInstance == null) {\n\t\t\t\t\tfirstInstance = new Singleton();\n\t\t\t\t\tCollections.shuffle(firstInstance.letterList);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn firstInstance;\n\t}\n\tpublic LinkedList<String> getLetterList(){\n\t\treturn firstInstance.letterList;\n\t}\n\tpublic LinkedList<String> getTiles(int howManyTiles){\n\t\tLinkedList<String> tilesToSend = new LinkedList<String>();\n\t\tfor(int i = 0; i <= howManyTiles; i++){\n\t\t\ttilesToSend.add(firstInstance.letterList.remove(0));\n\t\t}\n\t\treturn tilesToSend;\n\t}\n}",
    "implementation_type": null,
    "thread_safe": null,
    "protection": null
  },
  {
    "repo_name": "built-in",
    "file_path": "snippets/DatabaseConnection_Simple.java",
    "class_name": "DatabaseConnection",
    "code": "public class DatabaseConnection {\n    private static DatabaseConnection instance;\n    private Connection connection;\n    private DatabaseConnection() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:...\", \"user\", \"pass\");\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public static DatabaseConnection getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnection();\n        }\n        return instance;\n    }\n    public Connection getConnection() {\n        return connection;\n    }\n}",
    "implementation_type": "simple",
    "thread_safe": false,
    "protection": "none"
  },
  {
    "repo_name": "built-in",
    "file_path": "snippets/DatabaseManager_DoubleChecked.java",
    "class_name": "DatabaseManager",
    "code": "public class DatabaseManager {\n    private static volatile DatabaseManager INSTANCE = null;\n    private DatabaseManager() {\n        if (INSTANCE != null) {\n            throw new RuntimeException(\"Use getInstance()\");\n        }\n    }\n    public static DatabaseManager getInstance() {\n        if (INSTANCE == null) {\n            synchronized (DatabaseManager.class) {\n                if (INSTANCE == null) {\n                    INSTANCE = new DatabaseManager();\n                }\n            }\n        }\n        return INSTANCE;\n    }\n}",
    "implementation_type": "double_checked",
    "thread_safe": true,
    "protection": "reflection_safe"
  },
  {
    "repo_name": "built-in",
    "file_path": "snippets/BillPughSingleton.java",
    "class_name": "BillPughSingleton",
    "code": "public class BillPughSingleton {\n    private BillPughSingleton() {}\n    private static class Holder {\n        private static final BillPughSingleton INSTANCE = new BillPughSingleton();\n    }\n    public static BillPughSingleton getInstance() {\n        return Holder.INSTANCE;\n    }\n}",
    "implementation_type": "bill_pugh",
    "thread_safe": true,
    "protection": "none"
  },
  {
    "repo_name": "built-in",
    "file_path": "snippets/SingletonEnum.java",
    "class_name": "SingletonEnum",
    "code": "public enum SingletonEnum {\n    INSTANCE;\n    private Connection connection;\n    private SingletonEnum() {\n        connection = ...; \n    }\n    public Connection getConnection() {\n        return connection;\n    }\n}",
    "implementation_type": "enum",
    "thread_safe": true,
    "protection": "reflection_serialization"
  }
]